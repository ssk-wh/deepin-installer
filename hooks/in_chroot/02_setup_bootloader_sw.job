#!/bin/bash
#
# Copyright (C) 2017 ~ 2018 Deepin Technology Co., Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Install grub to disk. Only used in sw_64 based platforms

if ! is_sw; then
  return 0
fi

export DEBIAN_FRONTEND="noninteractive"

DI_BOOTLOADER=$(installer_get "DI_BOOTLOADER")
DI_CUR_RESOLUTION=$(installer_get "DI_CUR_RESOLUTION")
DI_HOST_DEV=$(installer_get "DI_HOST_DEV")
DI_LUPIN=$(installer_get "DI_LUPIN")
DI_UEFI=$(installer_get "DI_UEFI")

# if no DI_BOOTLOADER, treat as not installing bootloader
[ -z ${DI_BOOTLOADER} ] && \
  warn_exit "DI_BOOTLOADER not set. Treat as not install bootloader. Skip."

if [ x${DI_UEFI} = xtrue ]; then
  BOOT="uefi"
else
  #BOOT="legacy"
  # Legacy mode is no supported on sw_64
  exit 1
fi

# Check SecureBoot option is enabled or not.
#if [ x${BOOT} = xuefi ]; then
#  SB=/sys/firmware/efi/vars/SecureBoot-8be4df61-93ca-11d2-aa0d-00e098032b8c/data
#  value=$(od -An -t u1 "${SB}" 2>/dev/null | sed s/[[:space:]]//g)
#  [ x${value} = x1 ] && echo "uefi-secure-boot detected"
#fi

case ${BOOT} in
  "uefi")
    # try to get efi architecture
    install_package grub-efi-sw64 efibootmgr
    add_start_option --target=sw64-efi  --recheck # 增加系统启动选项
    ;;
esac

# Try to avoid kernel update error when create symbol link
case ${BOOT} in
  "uefi")
    echo "# avoid kernel update fails with /boot on FAT32
do_symlinks = no" | tee /etc/kernel-img.conf
    ;;
esac

case ${BOOT} in
  uefi*)
    echo "Try to fix efi boot order to deepin first"
    fix_boot_order
    ;;
  *)
    ;;
esac

GRUB_TIMEOUT=$(installer_get "grub_timeout")
GRUB_TIMEOUT=${GRUB_TIMEOUT:-3}

cat >> /etc/default/grub << EOF
# Generated by deepin-installer
GRUB_BACKGROUND="/boot/grub/themes/deepin/background.png"
GRUB_CMDLINE_LINUX_DEFAULT="video=efifb:nobgrt splash quiet"
GRUB_DEFAULT=0
GRUB_DISTRIBUTOR="\`/usr/bin/lsb_release -d -s 2>/dev/null || echo Deepin\`"
GRUB_THEME="/boot/grub/themes/deepin/theme.txt"
GRUB_TIMEOUT=${GRUB_TIMEOUT}
GRUB_GFXMODE=${DI_CUR_RESOLUTION}
DEEPIN_GFXMODE_DETECT=1
EOF

# detect display
if [ x${DI_LUPIN} != xtrue ]; then
  DISPLAY_PORT=$(installer_get "DI_DISPLAY_PORT")
  export XAUTHORITY=/var/run/lightdm/root/${DISPLAY_PORT}
  export DISPLAY=${DISPLAY_PORT}
fi
# update /etc/default/grub
LC_ALL="" LANGUAGE=$(installer_get "DI_LOCALE") LANG=$(installer_get "DI_LOCALE").UTF-8 /usr/lib/deepin-daemon/grub2 -prepare-gfxmode-detect

update_grub_local
